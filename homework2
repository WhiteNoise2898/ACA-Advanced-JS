//1. Rock, Paper, Scissors

const options = ["Rock", "Paper", "Scissors"];
const getRandomOption = () => options[Math.floor(Math.random() * options.length)];

const rps = (p1 = getRandomOption(), p2 = getRandomOption()) => {
    if (p1 === p2) return "It's a draw";
    if (
        (p1 === "Rock" && p2 === "Scissors") ||
        (p1 === "Scissors" && p2 === "Paper") ||
        (p1 === "Paper" && p2 === "Rock")
    ) return "The winner is p1";
    return "The winner is p2";
};

console.log(rps("Rock", "Paper")); 


// well this one is pretty long and there is no need in const options but i wanted to try

//the other option 
function rps(p1, p2) {
    if (p1 === p2) {
        return "It's a draw";
    } else if (
        (p1 === "Rock" && p2 === "Scissors") ||
        (p1 === "Scissors" && p2 === "Paper") ||
        (p1 === "Paper" && p2 === "Rock")
    ) {
        return "The winner is p1";
    } else {
        return "The winner is p2";
    }
}



//2. calculator

function calculator(a, b, operator) {

    function validateNumber(n) {
        n = Number(n); 
        if (isNaN(n)) { 
            return 'This is not a number';
        }
        return n; 
    }
a = validateNumber(a);
b = validateNumber(b);

    if (typeof a === 'string') return a; 
    if (typeof b === 'string') return b; 

    switch (operator) {
        case '+':
            return a + b;
        case '-':
            return a - b;
        case '*':
            return a * b;
        case '/':
            if (b === 0) {
                return "Cannot divide by zero";
            }
            return a / b;
        default:
            return "Invalid operator";
    }
};

3. temperature

function convertTemperature(value, scale) {
    switch (scale.toLowerCase()) {
        case "c":
            return (value * 9/5) + 32;
        case "f":
            return (value - 32) * 5/9;
        default: return "Invalid scale";
    }
}
console.log(convertTemperature(32, "c"));


4.age verification 

function isAdult(age) {

    function validateNumber(n) {

        n = Number(n);
        if (isNaN(n) || typeof n !== 'number') {
            return 'Invalid input: Age must be a number.';
        }
        return n;
    }

    age = validateNumber(age);
    
    if (typeof age === 'number') {
        if (age >= 18) {
            return true;
        } else {
            return false;
        }
    } else {
        return age;
    }
}

console.log(isAdult("adc"));


5.BMI Calculator 

 function calculateBMI(weight, height) {
    weight = Number(weight);
    height = Number(height);

    switch (true) {
        case isNaN(weight):
            return 'Invalid input: Weight must be a number.';
        case weight <= 0:
            return 'Invalid input: Weight must be a positive number.';
        case isNaN(height):
            return 'Invalid input: Height must be a number.';
        case height <= 0:
            return 'Invalid input: Height must be a positive number.';
        default:
            return weight / (height * height);
    }
}


6. Discount Calculator 

function calculateDiscount(price, discount) {

    price = Number(price);
    discount = Number(discount);

    if (isNaN(price) || price < 0) {
        return 'Invalid input: Price and discount must be valid numbers, and discount must be between 0 and 100. ';
    }
    if (isNaN(discount) || discount < 0 || discount > 100) {
        return 'Invalid input: Price and discount must be valid numbers, and discount must be between 0 and 100. ';
    }

    const discountedPrice = price * (1 - discount / 100);

    return discountedPrice;
    }
}


7. checkAge

function checkAge(age){

age = parseInt(age);

if (!isNaN(age)){
 return age >= 0 && age < 13? "Child":
        age >=13 && age <=19 ? "Teen":
        age >=20 && age <= 59 ? "Adult" :
       age >= 60?  "Senior" :
        "Something went wrong"
}
else{
     return "Invalid age"
    }
}
checkAge();

console.log(checkAge("abc"));
 

8. 
const a = 5;
const b = 10;
const c = 15;
const result = a < b && b < c ? "1" : a > b && b > c ? "2" : "3";

console.log(result);  
// the output will be 1 because it checks if the a<b and b<c are really the correct conditions and returns the expression which is executed if the condition is true


9. 
const hasID = true;
const over18 = false;
const canEnterClub = hasID && over18 || !hasID;

console.log(canEnterClub); //true
//because hasid is true and over18 is false, when comparing with && operator true && fasle will return false. && looks for the last true and the first false answer
//meanwhile in the case of || or operator it looks for the first true and last false and will return true in our case with false||true

10.
const x = 10;
const y = 20;
const z = 30;
let condition = (x < y && y < z) || (x > y && y > z);

console.log(condition); //true
// it checks (x < y && y < z)  and gets true then checks (x > y && y > z) and gets false an in this case with || operator gets the result true 


11.
const num = 30;
const boolean = false;
const result = num < 18 ? "1" : boolean && num >= 18 && num <= 65 ? "2" : "3";

console.log(result);
// it gets 3 
//looks like this 
//num < 18   is false 
//boolean is false, since the first expresion is false it gets false result. num <= 65 is true, but false && true is false with && operator 
// result 3


12. 
const a = 5, b = 10, c = 15;
const result = a > b && b < c || a < c && b > a;

console.log(result);


//a > b is false
//same, with && operator it gets the first false and gives you false result so  a > b && b < c  false and true gives you false
//a < c && b > a is true and true 
// in case of || operator it takes the first true and the last false


13. 
function foo1(num){
return  num % 2 === 0;
}

function foo2(num){
return  num > 0;
}

let number = -4;
let checkNumber = foo1(number) && foo2(number);

console.log(checkNumber);

//it gets false result 
//in foo1 we check if the num is even or odd, even tho -4 is negative number it still gets 0 result if -4%2 so the final result is true
//-4 is not bigger than 0 so its false
// in checkNumber we get true and false in this operator's cale it takes the false result 
